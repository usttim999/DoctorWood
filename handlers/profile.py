from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
)
from database import upsert_user, add_plant, list_plants, get_plant, delete_plant

# –≠—Ç–∞–ø –¥–∏–∞–ª–æ–≥–∞
ADD_NAME = range(1)


async def my_plants(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = update.effective_user
    user_id = upsert_user(
        chat_id=update.effective_chat.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name,
    )

    plants = list_plants(user_id)
    if not plants:
        text = "üå± *–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å—Ç–µ–Ω–∏–π*\n\n–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ üëá"
        keyboard = [[InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ", callback_data="add_plant")]]
        await update.message.reply_text(text, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(keyboard))
        return

    text = "üåø *–ú–æ–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è:*\n\n"
    keyboard = []
    for p in plants:
        pid, name, type_, photo, freq, last_watered, created = p
        text += f"‚Ä¢ **{name}**\n"
        keyboard.append([InlineKeyboardButton(f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å {name}", callback_data=f"delete_{pid}")])

    keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ", callback_data="add_plant")])
    await update.message.reply_text(text, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(keyboard))


async def my_plants_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ'"""
    query = update.callback_query
    await query.answer()
    if query.data == "add_plant":
        await query.message.reply_text(
            "üå± *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è*\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è:\n\n*–ü—Ä–∏–º–µ—Ä—ã:*\n‚Ä¢ –§–∏–∫—É—Å\n‚Ä¢ –ú–æ–Ω—Å—Ç–µ—Ä–∞\n‚Ä¢ –û—Ä—Ö–∏–¥–µ—è\n‚Ä¢ –ö–∞–∫—Ç—É—Å",
            parse_mode="Markdown"
        )
        return ADD_NAME
    return ConversationHandler.END


async def add_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—Ç–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
    plant_name = update.message.text.strip()

    user = update.effective_user
    user_id = upsert_user(
        chat_id=update.effective_chat.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name,
    )
    plant_id = add_plant(user_id=user_id, name=plant_name)

    # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã–º —Ä–∞—Å—Ç–µ–Ω–∏—è–º
    care_text = get_basic_care_info(plant_name)

    text = f"üåø *–†–∞—Å—Ç–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!*\n\n*–ù–∞–∑–≤–∞–Ω–∏–µ:* {plant_name}\n\n{care_text}"
    await update.message.reply_text(text, parse_mode="Markdown")

    context.user_data.clear()
    return ConversationHandler.END


def get_basic_care_info(plant_name: str) -> str:
    """–ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —É—Ö–æ–¥—É –∑–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏"""
    plant_name_lower = plant_name.lower()

    care_info = {
        "—Ñ–∏–∫—É—Å": "üíß *–ü–æ–ª–∏–≤:* —É–º–µ—Ä–µ–Ω–Ω—ã–π, –∫–æ–≥–¥–∞ –≤–µ—Ä—Ö–Ω–∏–π —Å–ª–æ–π –ø–æ—á–≤—ã –ø–æ–¥—Å–æ—Ö–Ω–µ—Ç\n‚òÄÔ∏è *–°–≤–µ—Ç:* —è—Ä–∫–∏–π —Ä–∞—Å—Å–µ—è–Ω–Ω—ã–π\nüå°Ô∏è *–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:* 18-25¬∞C\nüåø *–£—Ö–æ–¥:* —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –æ–ø—Ä—ã—Å–∫–∏–≤–∞–Ω–∏–µ",
        "–º–æ–Ω—Å—Ç–µ—Ä–∞": "üíß *–ü–æ–ª–∏–≤:* –æ–±–∏–ª—å–Ω—ã–π, –Ω–æ –¥–∞–≤–∞–π—Ç–µ –ø–æ—á–≤–µ –ø—Ä–æ—Å—ã—Ö–∞—Ç—å\n‚òÄÔ∏è *–°–≤–µ—Ç:* –ø–æ–ª—É—Ç–µ–Ω—å –∏–ª–∏ —Ä–∞—Å—Å–µ—è–Ω–Ω—ã–π —Å–≤–µ—Ç\nüå°Ô∏è *–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:* 20-25¬∞C\nüåø *–£—Ö–æ–¥:* –æ–ø—Ä—ã—Å–∫–∏–≤–∞–Ω–∏–µ, –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Ä–æ—Å—Ç–∞",
        "–æ—Ä—Ö–∏–¥–µ—è": "üíß *–ü–æ–ª–∏–≤:* —É–º–µ—Ä–µ–Ω–Ω—ã–π, –º–µ—Ç–æ–¥–æ–º –ø–æ–≥—Ä—É–∂–µ–Ω–∏—è\n‚òÄÔ∏è *–°–≤–µ—Ç:* —è—Ä–∫–∏–π —Ä–∞—Å—Å–µ—è–Ω–Ω—ã–π, –±–µ–∑ –ø—Ä—è–º–æ–≥–æ —Å–æ–ª–Ω—Ü–∞\nüå°Ô∏è *–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:* 18-25¬∞C\nüåø *–£—Ö–æ–¥:* —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å—É–±—Å—Ç—Ä–∞—Ç –¥–ª—è –æ—Ä—Ö–∏–¥–µ–π",
        "–∫–∞–∫—Ç—É—Å": "üíß *–ü–æ–ª–∏–≤:* —Ä–µ–¥–∫–∏–π, –∑–∏–º–æ–π –ø–æ—á—Ç–∏ –Ω–µ –ø–æ–ª–∏–≤–∞—Ç—å\n‚òÄÔ∏è *–°–≤–µ—Ç:* –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —è—Ä–∫–∏–π\nüå°Ô∏è *–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:* 20-30¬∞C –ª–µ—Ç–æ–º, 10-15¬∞C –∑–∏–º–æ–π\nüåø *–£—Ö–æ–¥:* —Ö–æ—Ä–æ—à–æ –¥—Ä–µ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ—á–≤–∞",
        "—Å—É–∫–∫—É–ª–µ–Ω—Ç": "üíß *–ü–æ–ª–∏–≤:* —É–º–µ—Ä–µ–Ω–Ω—ã–π, –¥–∞–≤–∞–π—Ç–µ –ø–æ—á–≤–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ—Å–æ—Ö–Ω—É—Ç—å\n‚òÄÔ∏è *–°–≤–µ—Ç:* —è—Ä–∫–∏–π –ø—Ä—è–º–æ–π\nüå°Ô∏è *–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:* 18-25¬∞C\nüåø *–£—Ö–æ–¥:* –ø–µ—Å—á–∞–Ω–∞—è –ø–æ—á–≤–∞, —Ö–æ—Ä–æ—à–∏–π –¥—Ä–µ–Ω–∞–∂",
        "–∞–ª–æ–µ": "üíß *–ü–æ–ª–∏–≤:* —É–º–µ—Ä–µ–Ω–Ω—ã–π, –∑–∏–º–æ–π —Ä–µ–∂–µ\n‚òÄÔ∏è *–°–≤–µ—Ç:* —è—Ä–∫–∏–π —Ä–∞—Å—Å–µ—è–Ω–Ω—ã–π\nüå°Ô∏è *–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:* 18-25¬∞C\nüåø *–£—Ö–æ–¥:* –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —á–∞—Å—Ç–æ–≥–æ —É—Ö–æ–¥–∞",
    }

    # –ü–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    for key, info in care_info.items():
        if key in plant_name_lower:
            return info

    # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π
    return "üí° *–û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n‚Ä¢ –ü–æ–ª–∏–≤: –∫–æ–≥–¥–∞ –≤–µ—Ä—Ö–Ω–∏–π —Å–ª–æ–π –ø–æ—á–≤—ã –ø–æ–¥—Å–æ—Ö\n‚Ä¢ –°–≤–µ—Ç: —è—Ä–∫–∏–π —Ä–∞—Å—Å–µ—è–Ω–Ω—ã–π\n‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: 18-25¬∞C\n‚Ä¢ –£–¥–æ–±—Ä–µ–Ω–∏—è: –≤–µ—Å–Ω–æ–π –∏ –ª–µ—Ç–æ–º\n\n–î–ª—è —Ç–æ—á–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"


async def send_plant_card(update_or_message, plant_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É —Ä–∞—Å—Ç–µ–Ω–∏—è"""
    msg = update_or_message.message if hasattr(update_or_message, "message") else update_or_message
    plant = get_plant(plant_id)
    if not plant:
        await msg.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–∞—Å—Ç–µ–Ω–∏–µ.")
        return

    pid, user_id, name, type_, photo, freq, last_watered, created = plant
    care_text = get_basic_care_info(name)

    text = f"üåø *–ö–∞—Ä—Ç–æ—á–∫–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è*\n\n*–ù–∞–∑–≤–∞–Ω–∏–µ:* {name}\n*–î–æ–±–∞–≤–ª–µ–Ω–æ:* {created.split('T')[0]}\n\n{care_text}"

    keyboard = [
        [InlineKeyboardButton("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ —Ñ–æ—Ç–æ", callback_data=f"diag_photo_{pid}")],
        [InlineKeyboardButton("üíß –û—Ç–º–µ—Ç–∏—Ç—å –ø–æ–ª–∏–≤", callback_data=f"water_{pid}")],
        [InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", callback_data=f"note_{pid}")],
        [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ", callback_data=f"delete_{pid}")],
    ]

    if photo:
        await msg.reply_photo(
            photo=photo,
            caption=text,
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        await msg.reply_text(
            text,
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )


async def delete_plant_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    if query.data.startswith("delete_"):
        plant_id = int(query.data.split("_")[1])
        delete_plant(plant_id)
        await query.edit_message_text("‚úÖ *–†–∞—Å—Ç–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ*\n\n–û–±–Ω–æ–≤–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥–æ–π /myplants",
                                      parse_mode="Markdown")


def build_profile_conversation():
    """–î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏—è"""
    return ConversationHandler(
        entry_points=[CallbackQueryHandler(my_plants_cb, pattern="^add_plant$")],
        states={
            ADD_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_name)],
        },
        fallbacks=[],
        allow_reentry=True,
    )
