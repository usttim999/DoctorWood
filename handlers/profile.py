import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
)
from database import upsert_user, add_plant, list_plants, get_plant, delete_plant

# –≠—Ç–∞–ø –¥–∏–∞–ª–æ–≥–∞
ADD_NAME = range(1)

OPENFARM_URL = "https://openfarm.cc/api/v1/crops?filter="


async def my_plants(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = update.effective_user
    user_id = upsert_user(
        chat_id=update.effective_chat.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name,
    )

    plants = list_plants(user_id)
    if not plants:
        text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å—Ç–µ–Ω–∏–π. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ."
        keyboard = [[InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ", callback_data="add_plant")]]
        await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
        return

    text = "*–ú–æ–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è:*\n\n"
    keyboard = []
    for p in plants:
        pid, name, type_, photo, freq, last_watered, created = p
        text += f"‚Ä¢ {name}\n"
        keyboard.append([InlineKeyboardButton(f"‚ùå –£–¥–∞–ª–∏—Ç—å {name}", callback_data=f"delete_{pid}")])

    keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ", callback_data="add_plant")])
    await update.message.reply_text(text, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(keyboard))


async def my_plants_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ'"""
    query = update.callback_query
    await query.answer()
    if query.data == "add_plant":
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–§–∏–∫—É—Å¬ª):")
        return ADD_NAME
    return ConversationHandler.END


async def add_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—Ç–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
    plant_name = update.message.text.strip()

    user = update.effective_user
    user_id = upsert_user(
        chat_id=update.effective_chat.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name,
    )
    plant_id = add_plant(user_id=user_id, name=plant_name)

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–∑ OpenFarm
    care_text = await fetch_openfarm_care(plant_name)

    text = f"*–ö–∞—Ä—Ç–æ—á–∫–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è*\n–ù–∞–∑–≤–∞–Ω–∏–µ: {plant_name}\n\n{care_text}"
    await update.message.reply_text(text, parse_mode="Markdown")

    context.user_data.clear()
    return ConversationHandler.END


# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ä—É—Å—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –≤ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ
NAME_MAP = {
    "—Ñ–∏–∫—É—Å": "ficus",
    "–º–æ–Ω—Å—Ç–µ—Ä–∞": "monstera",
    "—Å—É–∫–∫—É–ª–µ–Ω—Ç": "succulent",
    "–æ—Ä—Ö–∏–¥–µ—è": "orchid",
    "–∞–ª–æ–µ": "aloe",
    "–∫–∞–∫—Ç—É—Å": "cactus",
}

async def fetch_openfarm_care(plant_name: str) -> str:
    """–ó–∞–ø—Ä–æ—Å –∫ OpenFarm API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
    try:
        # –µ—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º ‚Äî –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∞–Ω–∞–ª–æ–≥
        query = NAME_MAP.get(plant_name.lower(), plant_name)

        response = requests.get(OPENFARM_URL + query, timeout=15)
        if not response.ok:
            return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ OpenFarm API ({response.status_code})"

        # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ JSON
        if "application/json" not in response.headers.get("Content-Type", ""):
            return "‚ÑπÔ∏è OpenFarm –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º."

        data = response.json()
        crops = data.get("data", [])
        if not crops:
            return "‚ÑπÔ∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Ö–æ–¥—É –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º."

        crop = crops[0]
        attr = crop.get("attributes", {})

        text = ""
        if attr.get("description"):
            text += f"üìñ {attr['description']}\n\n"
        if attr.get("sun_requirements"):
            text += f"‚òÄÔ∏è –°–≤–µ—Ç: {attr['sun_requirements']}\n"
        if attr.get("sowing_method"):
            text += f"üå± –ü–æ—Å–µ–≤: {attr['sowing_method']}\n"

        return text or "‚ÑπÔ∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Ö–æ–¥—É –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenFarm: {e}"



async def send_plant_card(update_or_message, plant_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É —Ä–∞—Å—Ç–µ–Ω–∏—è"""
    msg = update_or_message.message if hasattr(update_or_message, "message") else update_or_message
    plant = get_plant(plant_id)
    if not plant:
        await msg.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–∞—Å—Ç–µ–Ω–∏–µ.")
        return

    pid, user_id, name, type_, photo, freq, last_watered, created = plant
    care_text = await fetch_openfarm_care(name)

    text = f"*–ö–∞—Ä—Ç–æ—á–∫–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è*\n–ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n–î–æ–±–∞–≤–ª–µ–Ω–æ: {created.split('T')[0]}\n\n{care_text}"

    keyboard = [
        [InlineKeyboardButton("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ —Ñ–æ—Ç–æ", callback_data=f"diag_photo_{pid}")],
        [InlineKeyboardButton("üõé –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data=f"reminders_{pid}")],
        [InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è —É—Ö–æ–¥–∞", callback_data=f"history_{pid}")],
        [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ", callback_data=f"delete_{pid}")],
    ]

    if photo:
        await msg.reply_photo(photo=photo, caption=text, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        await msg.reply_text(text, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(keyboard))


async def delete_plant_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    if query.data.startswith("delete_"):
        plant_id = int(query.data.split("_")[1])
        delete_plant(plant_id)
        await query.edit_message_text("‚úÖ –†–∞—Å—Ç–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.\n–û–±–Ω–æ–≤–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥–æ–π /myplants")


def build_profile_conversation():
    """–î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ)"""
    return ConversationHandler(
        entry_points=[CallbackQueryHandler(my_plants_cb, pattern="^add_plant$")],
        states={
            ADD_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_name)],
        },
        fallbacks=[],
        allow_reentry=True,
    )
