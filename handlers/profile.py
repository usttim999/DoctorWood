from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
)
from database import (
    upsert_user,
    add_plant,
    list_plants,
    get_plant,
    delete_plant,
    set_watering_schedule,
    mark_watered
)

# –≠—Ç–∞–ø—ã –¥–∏–∞–ª–æ–≥–∞
ADD_NAME = range(1)
SET_WATERING_INTERVAL = range(2)


async def my_plants(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = update.effective_user
    user_id = upsert_user(
        chat_id=update.effective_chat.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name,
    )

    plants = list_plants(user_id)
    if not plants:
        text = "üå± *–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å—Ç–µ–Ω–∏–π*\n\n–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ üëá"
        keyboard = [[InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ", callback_data="add_plant")]]
        await update.message.reply_text(text, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(keyboard))
        return

    text = "üåø *–ú–æ–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è:*\n\n"
    keyboard = []
    for p in plants:
        pid, name, type_, photo, freq, last_watered, created = p
        text += f"‚Ä¢ **{name}**"
        if freq:
            text += f" üíß –∫–∞–∂–¥—ã–µ {freq} –¥–Ω–µ–π"
        text += "\n"

        keyboard.append([
            InlineKeyboardButton(f"üíß –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {name}", callback_data=f"reminders_{pid}"),
            InlineKeyboardButton(f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å {name}", callback_data=f"delete_{pid}")
        ])

    keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ", callback_data="add_plant")])
    await update.message.reply_text(text, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(keyboard))


async def my_plants_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ'"""
    query = update.callback_query
    await query.answer()
    if query.data == "add_plant":
        await query.message.reply_text(
            "üå± *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è*\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è:\n\n*–ü—Ä–∏–º–µ—Ä—ã:*\n‚Ä¢ –§–∏–∫—É—Å\n‚Ä¢ –ú–æ–Ω—Å—Ç–µ—Ä–∞\n‚Ä¢ –û—Ä—Ö–∏–¥–µ—è\n‚Ä¢ –ö–∞–∫—Ç—É—Å",
            parse_mode="Markdown"
        )
        return ADD_NAME
    return ConversationHandler.END


async def add_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—Ç–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
    plant_name = update.message.text.strip()

    user = update.effective_user
    user_id = upsert_user(
        chat_id=update.effective_chat.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name,
    )
    plant_id = add_plant(user_id=user_id, name=plant_name)

    care_text = get_basic_care_info(plant_name)

    text = f"üåø *–†–∞—Å—Ç–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!*\n\n*–ù–∞–∑–≤–∞–Ω–∏–µ:* {plant_name}\n\n{care_text}"
    await update.message.reply_text(text, parse_mode="Markdown")

    context.user_data.clear()
    return ConversationHandler.END


def get_basic_care_info(plant_name: str) -> str:
    """–ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —É—Ö–æ–¥—É –∑–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏"""
    plant_name_lower = plant_name.lower()

    care_info = {
        "—Ñ–∏–∫—É—Å": "üíß *–ü–æ–ª–∏–≤:* —É–º–µ—Ä–µ–Ω–Ω—ã–π, –∫–æ–≥–¥–∞ –≤–µ—Ä—Ö–Ω–∏–π —Å–ª–æ–π –ø–æ—á–≤—ã –ø–æ–¥—Å–æ—Ö–Ω–µ—Ç\n‚òÄÔ∏è *–°–≤–µ—Ç:* —è—Ä–∫–∏–π —Ä–∞—Å—Å–µ—è–Ω–Ω—ã–π\nüå°Ô∏è *–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:* 18-25¬∞C\nüåø *–£—Ö–æ–¥:* —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –æ–ø—Ä—ã—Å–∫–∏–≤–∞–Ω–∏–µ",
        "–º–æ–Ω—Å—Ç–µ—Ä–∞": "üíß *–ü–æ–ª–∏–≤:* –æ–±–∏–ª—å–Ω—ã–π, –Ω–æ –¥–∞–≤–∞–π—Ç–µ –ø–æ—á–≤–µ –ø—Ä–æ—Å—ã—Ö–∞—Ç—å\n‚òÄÔ∏è *–°–≤–µ—Ç:* –ø–æ–ª—É—Ç–µ–Ω—å –∏–ª–∏ —Ä–∞—Å—Å–µ—è–Ω–Ω—ã–π —Å–≤–µ—Ç\nüå°Ô∏è *–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:* 20-25¬∞C\nüåø *–£—Ö–æ–¥:* –æ–ø—Ä—ã—Å–∫–∏–≤–∞–Ω–∏–µ, –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Ä–æ—Å—Ç–∞",
        "–æ—Ä—Ö–∏–¥–µ—è": "üíß *–ü–æ–ª–∏–≤:* —É–º–µ—Ä–µ–Ω–Ω—ã–π, –º–µ—Ç–æ–¥–æ–º –ø–æ–≥—Ä—É–∂–µ–Ω–∏—è\n‚òÄÔ∏è *–°–≤–µ—Ç:* —è—Ä–∫–∏–π —Ä–∞—Å—Å–µ—è–Ω–Ω—ã–π, –±–µ–∑ –ø—Ä—è–º–æ–≥–æ —Å–æ–ª–Ω—Ü–∞\nüå°Ô∏è *–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:* 18-25¬∞C\nüåø *–£—Ö–æ–¥:* —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å—É–±—Å—Ç—Ä–∞—Ç –¥–ª—è –æ—Ä—Ö–∏–¥–µ–π",
        "–∫–∞–∫—Ç—É—Å": "üíß *–ü–æ–ª–∏–≤:* —Ä–µ–¥–∫–∏–π, –∑–∏–º–æ–π –ø–æ—á—Ç–∏ –Ω–µ –ø–æ–ª–∏–≤–∞—Ç—å\n‚òÄÔ∏è *–°–≤–µ—Ç:* –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —è—Ä–∫–∏–π\nüå°Ô∏è *–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:* 20-30¬∞C –ª–µ—Ç–æ–º, 10-15¬∞C –∑–∏–º–æ–π\nüåø *–£—Ö–æ–¥:* —Ö–æ—Ä–æ—à–æ –¥—Ä–µ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ—á–≤–∞",
        "—Å—É–∫–∫—É–ª–µ–Ω—Ç": "üíß *–ü–æ–ª–∏–≤:* —É–º–µ—Ä–µ–Ω–Ω—ã–π, –¥–∞–≤–∞–π—Ç–µ –ø–æ—á–≤–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ—Å–æ—Ö–Ω—É—Ç—å\n‚òÄÔ∏è *–°–≤–µ—Ç:* —è—Ä–∫–∏–π –ø—Ä—è–º–æ–π\nüå°Ô∏è *–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:* 18-25¬∞C\nüåø *–£—Ö–æ–¥:* –ø–µ—Å—á–∞–Ω–∞—è –ø–æ—á–≤–∞, —Ö–æ—Ä–æ—à–∏–π –¥—Ä–µ–Ω–∞–∂",
        "–∞–ª–æ–µ": "üíß *–ü–æ–ª–∏–≤:* —É–º–µ—Ä–µ–Ω–Ω—ã–π, –∑–∏–º–æ–π —Ä–µ–∂–µ\n‚òÄÔ∏è *–°–≤–µ—Ç:* —è—Ä–∫–∏–π —Ä–∞—Å—Å–µ—è–Ω–Ω—ã–π\nüå°Ô∏è *–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:* 18-25¬∞C\nüåø *–£—Ö–æ–¥:* –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —á–∞—Å—Ç–æ–≥–æ —É—Ö–æ–¥–∞",
    }

    for key, info in care_info.items():
        if key in plant_name_lower:
            return info

    return "üí° *–û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n‚Ä¢ –ü–æ–ª–∏–≤: –∫–æ–≥–¥–∞ –≤–µ—Ä—Ö–Ω–∏–π —Å–ª–æ–π –ø–æ—á–≤—ã –ø–æ–¥—Å–æ—Ö\n‚Ä¢ –°–≤–µ—Ç: —è—Ä–∫–∏–π —Ä–∞—Å—Å–µ—è–Ω–Ω—ã–π\n‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: 18-25¬∞C\n‚Ä¢ –£–¥–æ–±—Ä–µ–Ω–∏—è: –≤–µ—Å–Ω–æ–π –∏ –ª–µ—Ç–æ–º\n\n–î–ª—è —Ç–æ—á–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"


async def delete_plant_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    if query.data.startswith("delete_"):
        plant_id = int(query.data.split("_")[1])
        delete_plant(plant_id)
        await query.edit_message_text("‚úÖ *–†–∞—Å—Ç–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ*\n\n–û–±–Ω–æ–≤–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥–æ–π /myplants",
                                      parse_mode="Markdown")


async def setup_reminders_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø–æ–ª–∏–≤–µ"""
    query = update.callback_query
    await query.answer()

    if query.data.startswith("reminders_"):
        plant_id = int(query.data.split("_")[1])
        context.user_data['setup_plant_id'] = plant_id

        plant = get_plant(plant_id)
        if plant:
            pid, user_id, name, type_, photo, freq, last_watered, created = plant

            text = (
                f"üõé *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è {name}*\n\n"
                f"–ö–∞–∫ —á–∞—Å—Ç–æ –Ω—É–∂–Ω–æ –ø–æ–ª–∏–≤–∞—Ç—å —ç—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏–µ?\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∑–Ω–∞—á–µ–Ω–∏–µ:"
            )

            keyboard = [
                [InlineKeyboardButton("üíß –ö–∞–∂–¥—ã–π –¥–µ–Ω—å", callback_data="interval_1")],
                [InlineKeyboardButton("üíß –ö–∞–∂–¥—ã–µ 3 –¥–Ω—è", callback_data="interval_3")],
                [InlineKeyboardButton("üíß –†–∞–∑ –≤ –Ω–µ–¥–µ–ª—é", callback_data="interval_7")],
                [InlineKeyboardButton("üíß –†–∞–∑ –≤ 2 –Ω–µ–¥–µ–ª–∏", callback_data="interval_14")],
                [InlineKeyboardButton("üìù –í–≤–µ—Å—Ç–∏ —Å–≤–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª", callback_data="custom_interval")]
            ]

            await query.message.reply_text(
                text,
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return SET_WATERING_INTERVAL


async def handle_interval_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø–æ–ª–∏–≤–∞"""
    query = update.callback_query
    await query.answer()

    if query.data.startswith("interval_"):
        interval = int(query.data.split("_")[1])
        plant_id = context.user_data.get('setup_plant_id')

        if plant_id:
            set_watering_schedule(plant_id, interval)
            plant = get_plant(plant_id)

            await query.message.reply_text(
                f"‚úÖ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!*\n\n"
                f"–†–∞—Å—Ç–µ–Ω–∏–µ *{plant[2]}* –±—É–¥–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –ø–æ–ª–∏–≤–µ –∫–∞–∂–¥—ã–µ {interval} –¥–Ω–µ–π.\n\n"
                f"–ë–æ—Ç –ø—Ä–∏—à–ª—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –ø—Ä–∏–¥—ë—Ç –≤—Ä–µ–º—è –ø–æ–ª–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ.",
                parse_mode="Markdown"
            )

        context.user_data.clear()
        return ConversationHandler.END

    elif query.data == "custom_interval":
        await query.message.reply_text(
            "üìù –í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–ª–∏–≤–∞ –≤ –¥–Ω—è—Ö:\n\n"
            "*–ü—Ä–∏–º–µ—Ä:* 5 (–ø–æ–ª–∏–≤ –∫–∞–∂–¥—ã–µ 5 –¥–Ω–µ–π)",
            parse_mode="Markdown"
        )
        return SET_WATERING_INTERVAL


async def handle_custom_interval(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞"""
    try:
        interval = int(update.message.text.strip())
        if interval < 1 or interval > 30:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 30 –¥–Ω–µ–π")
            return SET_WATERING_INTERVAL

        plant_id = context.user_data.get('setup_plant_id')
        if plant_id:
            set_watering_schedule(plant_id, interval)
            plant = get_plant(plant_id)

            await update.message.reply_text(
                f"‚úÖ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!*\n\n"
                f"–†–∞—Å—Ç–µ–Ω–∏–µ *{plant[2]}* –±—É–¥–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –ø–æ–ª–∏–≤–µ –∫–∞–∂–¥—ã–µ {interval} –¥–Ω–µ–π.",
                parse_mode="Markdown"
            )

        context.user_data.clear()
        return ConversationHandler.END

    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        return SET_WATERING_INTERVAL


def build_profile_conversation():
    """–î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏—è"""
    return ConversationHandler(
        entry_points=[CallbackQueryHandler(my_plants_cb, pattern="^add_plant$")],
        states={
            ADD_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_name)],
        },
        fallbacks=[],
        allow_reentry=True,
        per_message=False
    )