from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler, CommandHandler, MessageHandler, filters, CallbackQueryHandler
from database import init_db, upsert_user, add_plant, list_plants, get_plant, delete_plant

# –≠—Ç–∞–ø—ã –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏—è
ADD_NAME, ADD_TYPE, ADD_PHOTO, ADD_WATER_FREQ = range(4)


async def my_plants(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = upsert_user(
        chat_id=update.effective_chat.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )

    plants = list_plants(user_id)
    if not plants:
        text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å—Ç–µ–Ω–∏–π. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ."
        keyboard = [[InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ", callback_data="add_plant")]]
        await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
        return

    text = "*–ú–æ–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è:*\n\n"
    keyboard = []

    for p in plants:
        pid, name, type_, photo, freq, last_watered, created = p
        text += f"‚Ä¢ {name} ({type_ or '—Ç–∏–ø –Ω–µ —É–∫–∞–∑–∞–Ω'})\n"
        # –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è
        keyboard.append([InlineKeyboardButton(f"‚ùå –£–¥–∞–ª–∏—Ç—å {name}", callback_data=f"delete_{pid}")])

    # –≤–Ω–∏–∑—É –∫–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ", callback_data="add_plant")])

    await update.message.reply_text(text, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(keyboard))

async def my_plants_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "add_plant":
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–§–∏–∫—É—Å –ë–µ–Ω–¥–∂–∞–º–∏–Ω–∞¬ª):")
        return ADD_NAME

    return ConversationHandler.END


async def add_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["plant_name"] = update.message.text.strip()
    await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø/–≤–∏–¥ —Ä–∞—Å—Ç–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´—Ñ–∏–∫—É—Å¬ª, ¬´–º–æ–Ω—Å—Ç–µ—Ä–∞¬ª, ¬´—Å—É–∫–∫—É–ª–µ–Ω—Ç¬ª). –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—Ç–µ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª.")
    return ADD_TYPE


async def add_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    context.user_data["plant_type"] = None if text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else text
    await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª.")
    return ADD_PHOTO


async def add_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    photo_file_id = None
    if update.message.photo:
        # –ë–µ—Ä—ë–º –∫—Ä—É–ø–Ω–æ–µ —Ñ–æ—Ç–æ
        photo = update.message.photo[-1]
        photo_file_id = photo.file_id

    context.user_data["photo_file_id"] = photo_file_id
    await update.message.reply_text("–ö–∞–∫ —á–∞—Å—Ç–æ –ø–æ–ª–∏–≤–∞—Ç—å? –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –¥–Ω–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: 7). –ï—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω—ã ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª.")
    return ADD_WATER_FREQ


async def add_water_freq(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip().lower()
    watering_every_days = None
    if text != "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        try:
            watering_every_days = int(text)
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 7) –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª.")
            return ADD_WATER_FREQ

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    user = update.effective_user
    user_id = upsert_user(
        chat_id=update.effective_chat.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    plant_id = add_plant(
        user_id=user_id,
        name=context.user_data.get("plant_name"),
        type_=context.user_data.get("plant_type"),
        photo_file_id=context.user_data.get("photo_file_id"),
        watering_every_days=watering_every_days
    )

    # –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É —Ä–∞—Å—Ç–µ–Ω–∏—è
    await send_plant_card(update, plant_id)
    context.user_data.clear()
    return ConversationHandler.END


async def send_plant_card(update_or_message, plant_id: int):
    # update_or_message –º–æ–∂–µ—Ç –±—ã—Ç—å Update –∏–ª–∏ Message
    msg = update_or_message.message if hasattr(update_or_message, "message") else update_or_message

    plant = get_plant(plant_id)
    if not plant:
        await msg.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–∞—Å—Ç–µ–Ω–∏–µ.")
        return

    pid, user_id, name, type_, photo, freq, last_watered, created = plant
    text = (
        f"*–ö–∞—Ä—Ç–æ—á–∫–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è*\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
        f"–¢–∏–ø: {type_ or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"–ü–æ–ª–∏–≤: –∫–∞–∂–¥—ã–µ {freq or 'N/A'} –¥–Ω–µ–π\n"
        f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–ª–∏–≤: {last_watered or '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n"
        f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {created.split('T')[0]}"
    )

    keyboard = [
        [InlineKeyboardButton("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ —Ñ–æ—Ç–æ", callback_data=f"diag_photo_{pid}")],
        [InlineKeyboardButton("üõé –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data=f"reminders_{pid}")],
        [InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è —É—Ö–æ–¥–∞", callback_data=f"history_{pid}")],
    ]

    if photo:
        await msg.reply_photo(photo=photo, caption=text, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        await msg.reply_text(text, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(keyboard))


def build_profile_conversation():
    return ConversationHandler(
        entry_points=[
            CallbackQueryHandler(my_plants_cb, pattern="^add_plant$")
        ],
        states={
            ADD_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_name)],
            ADD_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_type)],
            ADD_PHOTO: [MessageHandler((filters.PHOTO | (filters.TEXT & ~filters.COMMAND)), add_photo)],
            ADD_WATER_FREQ: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_water_freq)],
        },
        fallbacks=[],
        allow_reentry=True,
    )
async def send_plant_card(update_or_message, plant_id: int):
    msg = update_or_message.message if hasattr(update_or_message, "message") else update_or_message

    plant = get_plant(plant_id)
    if not plant:
        await msg.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–∞—Å—Ç–µ–Ω–∏–µ.")
        return

    pid, user_id, name, type_, photo, freq, last_watered, created = plant
    text = (
        f"*–ö–∞—Ä—Ç–æ—á–∫–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è*\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
        f"–¢–∏–ø: {type_ or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"–ü–æ–ª–∏–≤: –∫–∞–∂–¥—ã–µ {freq or 'N/A'} –¥–Ω–µ–π\n"
        f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–ª–∏–≤: {last_watered or '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n"
        f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {created.split('T')[0]}"
    )

    keyboard = [
        [InlineKeyboardButton("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ —Ñ–æ—Ç–æ", callback_data=f"diag_photo_{pid}")],
        [InlineKeyboardButton("üõé –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data=f"reminders_{pid}")],
        [InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è —É—Ö–æ–¥–∞", callback_data=f"history_{pid}")],
        [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ", callback_data=f"delete_{pid}")]
    ]

    if photo:
        await msg.reply_photo(photo=photo, caption=text, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        await msg.reply_text(text, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(keyboard))


async def delete_plant_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data.startswith("delete_"):
        plant_id = int(query.data.split("_")[1])
        delete_plant(plant_id)
        await query.edit_message_text("‚úÖ –†–∞—Å—Ç–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.\n–û–±–Ω–æ–≤–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥–æ–π /myplants")