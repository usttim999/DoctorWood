import os
import requests
import base64
from telegram import Update
from telegram.ext import ContextTypes

API_KEY = os.getenv("PLANT_API_KEY")

async def diagnose_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.photo:
        await update.message.reply_text("üì∑ –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.")
        return

    # –ë–µ—Ä—ë–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
    photo = update.message.photo[-1]
    file = await context.bot.get_file(photo.file_id)
    file_path = "temp.jpg"
    await file.download_to_drive(file_path)

    try:
        # –ß–∏—Ç–∞–µ–º —Ñ–æ—Ç–æ –∏ –∫–æ–¥–∏—Ä—É–µ–º –≤ base64
        with open(file_path, "rb") as f:
            img_base64 = base64.b64encode(f.read()).decode("utf-8")

        url = "https://api.plant.id/v3/identification"
        headers = {
            "Api-Key": API_KEY,
            "Content-Type": "application/json"
        }
        payload = {
            "images": [img_base64],
            "health": "all",
            "classification_level": "species"
        }

        response = requests.post(url, headers=headers, json=payload, timeout=30)

        if not response.ok:
            await update.message.reply_text(
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API ({response.status_code}):\n{response.text}"
            )
            return

        result = response.json()
        text = ""

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ
        is_plant = result.get("result", {}).get("is_plant", {}).get("binary")
        if is_plant is False:
            await update.message.reply_text("‚ùå –ù–∞ —Ñ–æ—Ç–æ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ —Ä–∞—Å—Ç–µ–Ω–∏–µ.")
            return

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∏–¥–∞
        suggestions = result.get("result", {}).get("classification", {}).get("suggestions", [])
        if suggestions:
            best = suggestions[0]
            name = best.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            prob = round(best.get("probability", 0) * 100, 1)
            common = best.get("details", {}).get("common_names", [])
            if common:
                text += f"üå± –ü–æ—Ö–æ–∂–µ, —ç—Ç–æ *{name}* ({', '.join(common)}) —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é {prob}%\n\n"
            else:
                text += f"üå± –ü–æ—Ö–æ–∂–µ, —ç—Ç–æ *{name}* —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é {prob}%\n\n"
        else:
            text += "‚ùì –í–∏–¥ —Ä–∞—Å—Ç–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å.\n\n"

        # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
        disease_suggestions = result.get("result", {}).get("disease", {}).get("suggestions", [])
        if disease_suggestions:
            disease = disease_suggestions[0]
            d_name = disease.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –±–æ–ª–µ–∑–Ω—å")
            d_prob = round(disease.get("probability", 0) * 100, 1)
            desc = disease.get("details", {}).get("description", "")
            treatment = disease.get("details", {}).get("treatment", {})

            text += f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞: *{d_name}* ({d_prob}%)\n\n"
            if desc:
                text += f"–û–ø–∏—Å–∞–Ω–∏–µ: {desc}\n\n"
            if treatment:
                if treatment.get("biological"):
                    text += "üß™ –ë–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –ª–µ—á–µ–Ω–∏–µ: " + ", ".join(treatment["biological"]) + "\n"
                if treatment.get("chemical"):
                    text += "üíä –•–∏–º–∏—á–µ—Å–∫–æ–µ –ª–µ—á–µ–Ω–∏–µ: " + ", ".join(treatment["chemical"]) + "\n"
        else:
            text += "‚úÖ –†–∞—Å—Ç–µ–Ω–∏–µ –≤—ã–≥–ª—è–¥–∏—Ç –∑–¥–æ—Ä–æ–≤—ã–º!"

        await update.message.reply_text(text, parse_mode="Markdown")

    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {str(e)}")
