import os
import requests
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
)

# API –∫–ª—é—á –±–µ—Ä—ë–º –∏–∑ .env
TREFLE_API_KEY = os.getenv("TREFLE_API_KEY")
TREFLE_URL = "https://trefle.io/api/v1/species/search"

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
ASK_NAME = range(1)


async def trefle_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π"""
    if not TREFLE_API_KEY:
        await update.message.reply_text(
            "‚ùå API –∫–ª—é—á Trefle –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
        )
        return ConversationHandler.END

    await update.message.reply_text(
        "üîç *–ü–æ–∏—Å–∫ —Ä–∞—Å—Ç–µ–Ω–∏–π*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º:\n\n"
        "*–ü—Ä–∏–º–µ—Ä—ã:*\n"
        "‚Ä¢ –†–æ–∑–∞\n"
        "‚Ä¢ Ficus\n"
        "‚Ä¢ –û—Ä—Ö–∏–¥–µ—è\n"
        "‚Ä¢ Sunflower",
        parse_mode="Markdown",
        reply_markup=ReplyKeyboardMarkup([["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]], resize_keyboard=True),
    )
    return ASK_NAME


async def trefle_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∏—Å–∫ —Ä–∞—Å—Ç–µ–Ω–∏—è –≤ Trefle API"""
    query = update.message.text.strip()

    if query == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        from handlers.start import MAIN_KEYBOARD
        await update.message.reply_text(
            "‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=ReplyKeyboardMarkup(MAIN_KEYBOARD, resize_keyboard=True)
        )
        return ConversationHandler.END

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –∏–¥—ë—Ç –ø–æ–∏—Å–∫
    searching_msg = await update.message.reply_text("üîç –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å—Ç–µ–Ω–∏–∏...")

    try:
        url = f"{TREFLE_URL}?q={query}&token={TREFLE_API_KEY}"
        response = requests.get(url, timeout=15)

        if not response.ok:
            await searching_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ (–∫–æ–¥ {response.status_code})")
            return ConversationHandler.END

        data = response.json().get("data", [])
        if not data:
            await searching_msg.edit_text(
                f"üå± *–†–∞—Å—Ç–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ*\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                f"‚Ä¢ –í–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º\n"
                f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è\n"
                f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—É—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ",
                parse_mode="Markdown"
            )
            return ConversationHandler.END

        plant = data[0]
        await searching_msg.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç–≤–µ—Ç
        common_name = plant.get('common_name')
        scientific_name = plant.get('scientific_name')
        family = plant.get('family_common_name')
        genus = plant.get('genus')
        image_url = plant.get('image_url')

        text = "üåø *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å—Ç–µ–Ω–∏–∏*\n\n"

        if common_name:
            text += f"*–ù–∞–∑–≤–∞–Ω–∏–µ:* {common_name}\n"
        else:
            text += f"*–ù–∞–∑–≤–∞–Ω–∏–µ:* {query.title()}\n"

        if scientific_name:
            text += f"*–ù–∞—É—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:* {scientific_name}\n"

        if family:
            text += f"*–°–µ–º–µ–π—Å—Ç–≤–æ:* {family}\n"

        if genus:
            text += f"*–†–æ–¥:* {genus}\n"

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        text += "\n" + "‚îÄ" * 30 + "\n\n"

        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if plant.get('observations'):
            text += f"üìä *–ù–∞–±–ª—é–¥–µ–Ω–∏—è:* {plant['observations']}\n"

        if plant.get('vegetable'):
            text += "ü•¨ *–¢–∏–ø:* –û–≤–æ—â–Ω–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ\n"
        else:
            text += "üå∫ *–¢–∏–ø:* –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ\n"

        if plant.get('edible'):
            text += "üçΩÔ∏è *–°—ä–µ–¥–æ–±–Ω–æ—Å—Ç—å:* –°—ä–µ–¥–æ–±–Ω–æ–µ\n"
        else:
            text += "‚ö†Ô∏è *–°—ä–µ–¥–æ–±–Ω–æ—Å—Ç—å:* –ù–µ —Å—ä–µ–¥–æ–±–Ω–æ–µ\n"

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = [["üîç –ù–∞–π—Ç–∏ –¥—Ä—É–≥–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]]

        if image_url:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
            await update.message.reply_photo(
                photo=image_url,
                caption=text,
                parse_mode="Markdown",
                reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            )
        else:
            await update.message.reply_text(
                text,
                parse_mode="Markdown",
                reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            )

    except requests.exceptions.Timeout:
        await searching_msg.edit_text(
            "‚è∞ *–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞*\n\n"
            "–ü–æ–∏—Å–∫ –∑–∞–Ω—è–ª —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="Markdown"
        )
    except requests.exceptions.ConnectionError:
        await searching_msg.edit_text(
            "üåê *–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è*\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            parse_mode="Markdown"
        )
    except Exception as e:
        await searching_msg.edit_text(
            f"‚ùå *–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞*\n\n"
            f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {str(e)}",
            parse_mode="Markdown"
        )

    return ConversationHandler.END


async def handle_trefle_actions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞"""
    text = update.message.text

    if text == "üîç –ù–∞–π—Ç–∏ –¥—Ä—É–≥–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ":
        return await trefle_start(update, context)
    elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        from handlers.start import MAIN_KEYBOARD
        await update.message.reply_text(
            "‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=ReplyKeyboardMarkup(MAIN_KEYBOARD, resize_keyboard=True)
        )
        return ConversationHandler.END

    return ConversationHandler.END


def build_trefle_conversation():
    """–î–∏–∞–ª–æ–≥ –¥–ª—è –∫–Ω–æ–ø–∫–∏ üåç –ü–æ–∏—Å–∫ —Ä–∞—Å—Ç–µ–Ω–∏–π"""
    return ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üåç –ü–æ–∏—Å–∫ —Ä–∞—Å—Ç–µ–Ω–∏–π$"), trefle_start)],
        states={
            ASK_NAME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, trefle_search),
                MessageHandler(filters.Regex("^(üîç –ù–∞–π—Ç–∏ –¥—Ä—É–≥–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ|‚¨ÖÔ∏è –ù–∞–∑–∞–¥)$"), handle_trefle_actions)
            ],
        },
        fallbacks=[],
        allow_reentry=True,
    )