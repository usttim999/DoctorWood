import os
import requests
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
)

# API –∫–ª—é—á –±–µ—Ä—ë–º –∏–∑ .env
TREFLE_API_KEY = os.getenv("TREFLE_API_KEY")
TREFLE_URL = "https://trefle.io/api/v1/species/search"

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
ASK_NAME = range(1)


async def trefle_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è"""
    if not TREFLE_API_KEY:
        await update.message.reply_text(
            "‚ùå API –∫–ª—é—á Trefle –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ TREFLE_API_KEY –≤ .env"
        )
        return ConversationHandler.END

    await update.message.reply_text(
        "üåç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ Trefle:",
        reply_markup=ReplyKeyboardMarkup([["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]], resize_keyboard=True),
    )
    return ASK_NAME


async def trefle_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∏—Å–∫ —Ä–∞—Å—Ç–µ–Ω–∏—è –≤ Trefle API"""
    query = update.message.text.strip()
    if query == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await update.message.reply_text("‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
        return ConversationHandler.END

    url = f"{TREFLE_URL}?q={query}&token={TREFLE_API_KEY}"
    try:
        r = requests.get(url, timeout=15)
        if not r.ok:
            await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Trefle API ({r.status_code})")
            return ConversationHandler.END

        data = r.json().get("data", [])
        if not data:
            await update.message.reply_text("‚ÑπÔ∏è –†–∞—Å—Ç–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return ConversationHandler.END

        plant = data[0]
        text = f"üå± *{plant.get('common_name') or query.title()}*\n"
        text += f"üî¨ –ù–∞—É—á–Ω–æ–µ –∏–º—è: {plant.get('scientific_name')}\n"
        if plant.get("family_common_name"):
            text += f"üåø –°–µ–º–µ–π—Å—Ç–≤–æ: {plant['family_common_name']}\n"
        if plant.get("image_url"):
            text += f"\n–§–æ—Ç–æ: {plant['image_url']}"

        await update.message.reply_text(
            text, parse_mode="Markdown", disable_web_page_preview=False
        )
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Trefle: {e}")

    return ConversationHandler.END


def build_trefle_conversation():
    """–î–∏–∞–ª–æ–≥ –¥–ª—è –∫–Ω–æ–ø–∫–∏ üåç Trefle"""
    return ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üåç Trefle$"), trefle_start)],
        states={
            ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, trefle_search)],
        },
        fallbacks=[],
        allow_reentry=True,
    )
