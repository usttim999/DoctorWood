import os
import requests
import uuid
import time
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler, MessageHandler, filters

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è GigaChat
GIGACHAT_CREDENTIALS = os.getenv("GIGACHAT_CREDENTIALS")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
CHATTING_WITH_GARDENER = range(1)

# –ö—ç—à –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤
access_token_cache = None
token_expires_at = 0


async def get_gigachat_token():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞ GigaChat"""
    global access_token_cache, token_expires_at

    # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –µ—â–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω (30 –º–∏–Ω—É—Ç), –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
    current_time = int(time.time())
    if access_token_cache and token_expires_at > current_time:
        return access_token_cache

    url = "https://ngw.devices.sberbank.ru:9443/api/v2/oauth"

    headers = {
        'Content-Type': 'application/x-www-form-urlencoded',
        'Accept': 'application/json',
        'RqUID': str(uuid.uuid4()),
        'Authorization': f'Basic {GIGACHAT_CREDENTIALS}'
    }

    payload = {
        'scope': 'GIGACHAT_API_PERS'
    }

    try:
        # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É SSL –¥–ª—è GigaChat API
        response = requests.post(url, headers=headers, data=payload, timeout=10, verify=False)
        response.raise_for_status()

        data = response.json()
        access_token_cache = data['access_token']
        token_expires_at = data['expires_at'] // 1000  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –º—Å –≤ —Å–µ–∫—É–Ω–¥—ã

        print(f"‚úÖ –¢–æ–∫–µ–Ω GigaChat –ø–æ–ª—É—á–µ–Ω, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: {time.ctime(token_expires_at)}")
        return access_token_cache

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ GigaChat: {e}")
        return None


async def get_gigachat_response(question: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç GigaChat"""
    token = await get_gigachat_token()
    if not token:
        return "‚ùå *–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É*\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞."

    url = "https://gigachat.devices.sberbank.ru/api/v1/chat/completions"

    headers = {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'Authorization': f'Bearer {token}'
    }

    # –ü—Ä–æ–º–ø—Ç –¥–ª—è —Å–∞–¥–æ–≤–æ–¥–∞
    system_prompt = """–¢—ã –æ–ø—ã—Ç–Ω—ã–π —Å–∞–¥–æ–≤–æ–¥-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç —Å 20-–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º. –¢–≤–æ—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - –∫–æ–º–Ω–∞—Ç–Ω—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è, —Å–∞–¥–æ–≤–æ–¥—Å—Ç–≤–æ –∏ —É—Ö–æ–¥ –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏.

–û—Ç–≤–µ—á–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏. –†–∞–∑–±–∏–≤–∞–π –æ—Ç–≤–µ—Ç –Ω–∞ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –±–ª–æ–∫–∏.

–¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å:
- –ü—Ä–∞–∫—Ç–∏—á–Ω—ã–º–∏ –∏ –ø–æ–ª–µ–∑–Ω—ã–º–∏
- –° –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
- –° —É—á–µ—Ç–æ–º —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö —É—Å–ª–æ–≤–∏–π
- –î–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–º–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º–∏

–ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –¥–∞–π –æ–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ –ø—Ä–æ–±–ª–µ–º—ã."""

    data = {
        "model": "GigaChat",
        "messages": [
            {
                "role": "system",
                "content": system_prompt
            },
            {
                "role": "user",
                "content": question
            }
        ],
        "temperature": 0.7,
        "max_tokens": 1000
    }

    try:
        # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É SSL –¥–ª—è GigaChat API
        response = requests.post(url, headers=headers, json=data, timeout=30, verify=False)
        response.raise_for_status()

        result = response.json()
        answer = result['choices'][0]['message']['content']

        return answer

    except requests.exceptions.Timeout:
        return "‚è∞ *–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ*\n\nAI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –Ω–µ —É—Å–ø–µ–ª –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∫–æ—Ä–æ—á–µ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ."

    except requests.exceptions.RequestException as e:
        return f"‚ùå *–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º*\n\n–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {str(e)}"

    except Exception as e:
        return f"‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞*\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –ø–æ–∑–∂–µ."


async def start_gardener_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ —á–∞—Ç–∞ —Å AI-—Å–∞–¥–æ–≤–æ–¥–æ–º"""
    if not GIGACHAT_CREDENTIALS:
        await update.message.reply_text(
            "‚ùå *AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω*\n\n"
            "–í–µ–¥—É—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:\n"
            "‚Ä¢ üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ —Ñ–æ—Ç–æ\n"
            "‚Ä¢ üìö –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Ö–æ–¥—É\n"
            "‚Ä¢ üåç –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ —Ä–∞—Å—Ç–µ–Ω–∏–π",
            parse_mode="Markdown"
        )
        return ConversationHandler.END

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å GigaChat
    token = await get_gigachat_token()
    if not token:
        await update.message.reply_text(
            "‚ùå *AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω*\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–∏—Å—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="Markdown"
        )
        return ConversationHandler.END

    await update.message.reply_text(
        "üë®‚Äçüåæ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç —Å AI-—Å–∞–¥–æ–≤–æ–¥–æ–º!*\n\n"
        "–Ø - –≤–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ —Ä–∞—Å—Ç–µ–Ω–∏—è–º. –ó–∞–¥–∞–≤–∞–π—Ç–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n\n"
        "*–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:*\n"
        "‚Ä¢ –ü–æ—á–µ–º—É –∂–µ–ª—Ç–µ—é—Ç –ª–∏—Å—Ç—å—è —É –º–æ–µ–≥–æ —Ñ–∏–∫—É—Å–∞?\n"
        "‚Ä¢ –ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ—Å–∞–¥–∏—Ç—å –æ—Ä—Ö–∏–¥–µ—é?\n"
        "‚Ä¢ –ö–∞–∫–∏–µ —É–¥–æ–±—Ä–µ–Ω–∏—è –≤—ã–±—Ä–∞—Ç—å –¥–ª—è —Ä–æ–∑?\n"
        "‚Ä¢ –ß—Ç–æ –¥–µ–ª–∞—Ç—å –µ—Å–ª–∏ –Ω–∞ –ª–∏—Å—Ç—å—è—Ö –ø–æ—è–≤–∏–ª–∏—Å—å –ø—è—Ç–Ω–∞?\n"
        "‚Ä¢ –ö–∞–∫ —É—Ö–∞–∂–∏–≤–∞—Ç—å –∑–∞ —Å—É–∫–∫—É–ª–µ–Ω—Ç–∞–º–∏ –∑–∏–º–æ–π?\n\n"
        "–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –æ —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö üëá",
        parse_mode="Markdown",
        reply_markup=ReplyKeyboardMarkup([["‚¨ÖÔ∏è –í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞"]], resize_keyboard=True)
    )
    return CHATTING_WITH_GARDENER


async def handle_gardener_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∫ AI-—Å–∞–¥–æ–≤–æ–¥—É"""
    user_question = update.message.text

    if user_question == "‚¨ÖÔ∏è –í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞":
        return await end_gardener_chat(update, context)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç "–ø–µ—á–∞—Ç–∞–µ—Ç"
    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GigaChat
    response = await get_gigachat_response(user_question)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await update.message.reply_text(
        response,
        parse_mode="Markdown",
        reply_markup=ReplyKeyboardMarkup([["‚¨ÖÔ∏è –í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞"]], resize_keyboard=True)
    )

    return CHATTING_WITH_GARDENER


async def end_gardener_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–∞—Ç–∞"""
    from handlers.start import MAIN_KEYBOARD

    await update.message.reply_text(
        "üë®‚Äçüåæ *–ë—ã–ª —Ä–∞–¥ –ø–æ–º–æ—á—å!*\n\n"
        "–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ –≤–∞—à–∏—Ö —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö! üåø\n"
        "–¢–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:",
        parse_mode="Markdown",
        reply_markup=ReplyKeyboardMarkup(MAIN_KEYBOARD, resize_keyboard=True)
    )
    return ConversationHandler.END


def build_gardener_conversation():
    """–î–∏–∞–ª–æ–≥ —á–∞—Ç–∞ —Å AI-—Å–∞–¥–æ–≤–æ–¥–æ–º"""
    return ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üë®‚Äçüåæ –ß–∞—Ç —Å –∞–≥—Ä–æ–Ω–æ–º–æ–º$"), start_gardener_chat)],
        states={
            CHATTING_WITH_GARDENER: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_gardener_question)
            ],
        },
        fallbacks=[MessageHandler(filters.Regex("^(‚¨ÖÔ∏è –í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞)$"), end_gardener_chat)],
        allow_reentry=True,
        per_message=False
    )