import logging
import os
# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ .env
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    pass

from telegram import ReplyKeyboardMarkup, Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

from database import init_db
from handlers.profile import my_plants, build_profile_conversation, delete_plant_cb
from handlers.diagnosis import handle_symptoms as diagnose_text
from handlers.recommendations import get_recommendations
from handlers.diagnose_photo import diagnose_photo

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    logging.error("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    exit(1)


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        ["üå± –ú–æ–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è", "üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π"],
        ["üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", "üõé –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"],
        ["üë®‚Äçüåæ –ß–∞—Ç —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    text = (
        "üåø *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ üëá"
    )
    await update.message.reply_text(text, parse_mode="Markdown", reply_markup=reply_markup)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üå± –ú–æ–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è":
        await my_plants(update, context)
    elif text == "üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π":
        await update.message.reply_text("–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üìñ")
    elif text == "üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞":
        await update.message.reply_text("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ üñºÔ∏è")
    elif text == "üõé –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è":
        await update.message.reply_text("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ ‚è∞")
    elif text == "üë®‚Äçüåæ –ß–∞—Ç —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º":
        await update.message.reply_text("–§—É–Ω–∫—Ü–∏—è –ø–ª–∞—Ç–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üí¨")


# –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "*–ö–æ–º–∞–Ω–¥—ã:*\n"
        "/start ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/myplants ‚Äî —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π, –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ\n"
        "/recommendations ‚Äî –æ–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Ö–æ–¥—É\n",
        parse_mode="Markdown"
    )


def main():
    init_db()

    app = Application.builder().token(TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("myplants", my_plants))
    app.add_handler(CommandHandler("recommendations", get_recommendations))

    # –î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏—è
    app.add_handler(build_profile_conversation())

    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ —Ç–µ–∫—Å—Ç—É
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, diagnose_text))

    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ —Ñ–æ—Ç–æ
    app.add_handler(MessageHandler(filters.PHOTO, diagnose_photo))

    # Callback –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏—è
    app.add_handler(CallbackQueryHandler(delete_plant_cb, pattern="^delete_"))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
    app.add_handler(MessageHandler(
        filters.Regex("^(üå± –ú–æ–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è|üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π|üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞|üõé –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è|üë®‚Äçüåæ –ß–∞—Ç —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º)$"),
        handle_menu
    ))

    logging.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()


if __name__ == "__main__":
    main()
