import logging
import os
from telegram.ext import Application, CommandHandler, MessageHandler, filters

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)


async def start(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = """
üåø *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ä–∞—Å—Ç–µ–Ω–∏–π!*

–Ø –ø–æ–º–æ–≥—É –≤–∞–º:
‚Ä¢ üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Ä–∞—Å—Ç–µ–Ω–∏–π –ø–æ —Å–∏–º–ø—Ç–æ–º–∞–º
‚Ä¢ üíä –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ª–µ—á–µ–Ω–∏—é
‚Ä¢ üõ°Ô∏è –£–∑–Ω–∞—Ç—å –æ –º–µ—Ç–æ–¥–∞—Ö –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∏

*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/diagnose - –î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É
/recommendations - –ü–æ–ª—É—á–∏—Ç—å –æ–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
/help - –ü–æ–º–æ—â—å

–û–ø–∏—à–∏—Ç–µ —Å–∏–º–ø—Ç–æ–º—ã –≤–∞—à–µ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è, –∏ —è –ø–æ–º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É!
    """
    await update.message.reply_text(welcome_text, parse_mode='Markdown')


async def help_command(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
*–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:*
1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /diagnose –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
2. –û–ø–∏—à–∏—Ç–µ —Å–∏–º–ø—Ç–æ–º—ã –≤–∞—à–µ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è
3. –Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–∏–º–ø—Ç–æ–º—ã –∏ –¥–∞–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    """
    await update.message.reply_text(help_text, parse_mode='Markdown')


async def handle_symptoms(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Å–∏–º–ø—Ç–æ–º–æ–≤"""
    from config import PLANT_DISEASES

    user_text = update.message.text.lower()

    # –ü–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
    found_diseases = []

    for disease, info in PLANT_DISEASES.items():
        for symptom in info['symptoms']:
            if symptom in user_text:
                found_diseases.append((disease, info))
                break

    if found_diseases:
        response = "üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:*\n\n"

        for disease_name, disease_info in found_diseases:
            response += f"*{disease_name.upper()}*\n"
            response += f"*–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:* {', '.join(disease_info['causes'])}\n"
            response += f"*–õ–µ—á–µ–Ω–∏–µ:* {disease_info['treatment']}\n"
            response += f"*–ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞:* {disease_info['prevention']}\n\n"
    else:
        response = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É. –û–ø–∏—à–∏—Ç–µ —Å–∏–º–ø—Ç–æ–º—ã –ø–æ–¥—Ä–æ–±–Ω–µ–µ."

    await update.message.reply_text(response, parse_mode='Markdown')


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    token = os.getenv('BOT_TOKEN')

    if not token:
        logging.error("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(token).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("diagnose", start))  # –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º start
    application.add_handler(CommandHandler("recommendations", help_command))  # –í—Ä–µ–º–µ–Ω–Ω–æ
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_symptoms))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()


if __name__ == '__main__':
    main()