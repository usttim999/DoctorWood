import logging
import os
from dotenv import load_dotenv
from telegram import ReplyKeyboardMarkup, Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

from database import init_db
from handlers.profile import my_plants, build_profile_conversation, delete_plant_cb
from handlers.diagnosis import handle_symptoms
from handlers.recommendations import get_recommendations
from handlers.diagnose_photo import diagnose_photo
from handlers.trefle import build_trefle_conversation

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env
load_dotenv()

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)

TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    logging.error("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    exit(1)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
MAIN_KEYBOARD = [
    ["üå± –ú–æ–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è", "üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π"],
    ["üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", "üõé –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"],
    ["üë®‚Äçüåæ –ß–∞—Ç —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º", "üåç Trefle"],
]

BACK_KEYBOARD = [["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]]


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply_markup = ReplyKeyboardMarkup(MAIN_KEYBOARD, resize_keyboard=True)
    await update.message.reply_text(
        "üåø *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ üëá",
        parse_mode="Markdown",
        reply_markup=reply_markup,
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "*–ö–æ–º–∞–Ω–¥—ã:*\n"
        "/start ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/myplants ‚Äî —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π\n"
        "/diagnose ‚Äî –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ —Ñ–æ—Ç–æ\n"
        "/recommendations ‚Äî —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Ö–æ–¥—É\n",
        parse_mode="Markdown",
    )


async def diagnose_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üîç –î–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è üñºÔ∏è",
        reply_markup=ReplyKeyboardMarkup(BACK_KEYBOARD, resize_keyboard=True),
    )


async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "üå± –ú–æ–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è":
        await my_plants(update, context)
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=ReplyKeyboardMarkup(BACK_KEYBOARD, resize_keyboard=True),
        )

    elif text == "üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π":
        await update.message.reply_text(
            "üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
            reply_markup=ReplyKeyboardMarkup(BACK_KEYBOARD, resize_keyboard=True),
        )

    elif text == "üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞":
        await diagnose_command(update, context)

    elif text == "üõé –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è":
        await update.message.reply_text(
            "üõé –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
            reply_markup=ReplyKeyboardMarkup(BACK_KEYBOARD, resize_keyboard=True),
        )

    elif text == "üë®‚Äçüåæ –ß–∞—Ç —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º":
        await update.message.reply_text(
            "üë®‚Äçüåæ –ß–∞—Ç —Å –∞–≥—Ä–æ–Ω–æ–º–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
            reply_markup=ReplyKeyboardMarkup(BACK_KEYBOARD, resize_keyboard=True),
        )

    elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await start(update, context)

    elif text == "üåç Trefle":
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ Trefle.\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: `/trefle ficus`",
            parse_mode="Markdown",
            reply_markup=ReplyKeyboardMarkup(BACK_KEYBOARD, resize_keyboard=True),
        )


def main():
    init_db()
    app = Application.builder().token(TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("myplants", my_plants))
    app.add_handler(CommandHandler("recommendations", get_recommendations))
    app.add_handler(CommandHandler("diagnose", diagnose_command))

    # –î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏—è
    app.add_handler(build_profile_conversation())

    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ —Ñ–æ—Ç–æ
    app.add_handler(MessageHandler(filters.PHOTO, diagnose_photo))

    # Callback –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏—è
    app.add_handler(CallbackQueryHandler(delete_plant_cb, pattern="^delete_"))
    app.add_handler(build_trefle_conversation())

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é (–≤–∫–ª—é—á–∞—è –ù–∞–∑–∞–¥)
    app.add_handler(
        MessageHandler(
            filters.Regex(
                "^(üå± –ú–æ–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è|üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π|üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞|üõé –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è|üë®‚Äçüåæ –ß–∞—Ç —Å —ç–∫—Å–ø–µ—Ä—Ç–æ–º|‚¨ÖÔ∏è –ù–∞–∑–∞–¥)$"
            ),
            handle_menu,
        )
    )

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–º–ø—Ç–æ–º–æ–≤ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç –∏ –Ω–µ –∫–æ–º–∞–Ω–¥–∞/–∫–Ω–æ–ø–∫–∞)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_symptoms))

    logging.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()


if __name__ == "__main__":
    main()
