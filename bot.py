import logging
import os
from dotenv import load_dotenv
from telegram.ext import Application, CommandHandler, MessageHandler, filters

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env (–ª–æ–∫–∞–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–∞ Render –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è, –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç)
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
TOKEN = os.getenv("BOT_TOKEN")

if not TOKEN:
    logging.error("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å .env –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    exit(1)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
async def start(update, context):
    welcome_text = """
üåø *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ä–∞—Å—Ç–µ–Ω–∏–π!*

–Ø –ø–æ–º–æ–≥—É –≤–∞–º:
‚Ä¢ üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Ä–∞—Å—Ç–µ–Ω–∏–π –ø–æ —Å–∏–º–ø—Ç–æ–º–∞–º
‚Ä¢ üíä –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ª–µ—á–µ–Ω–∏—é
‚Ä¢ üõ°Ô∏è –£–∑–Ω–∞—Ç—å –æ –º–µ—Ç–æ–¥–∞—Ö –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∏

*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/diagnose - –î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É
/recommendations - –ü–æ–ª—É—á–∏—Ç—å –æ–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
/help - –ü–æ–º–æ—â—å

–û–ø–∏—à–∏—Ç–µ —Å–∏–º–ø—Ç–æ–º—ã –≤–∞—à–µ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è, –∏ —è –ø–æ–º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É!
    """
    await update.message.reply_text(welcome_text, parse_mode="Markdown")


async def help_command(update, context):
    help_text = """
*–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:*
1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /diagnose –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
2. –û–ø–∏—à–∏—Ç–µ —Å–∏–º–ø—Ç–æ–º—ã –≤–∞—à–µ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è
3. –Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–∏–º–ø—Ç–æ–º—ã –∏ –¥–∞–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    """
    await update.message.reply_text(help_text, parse_mode="Markdown")


async def diagnose(update, context):
    from handlers.diagnosis import diagnose_plant
    await diagnose_plant(update, context)


async def recommendations(update, context):
    from handlers.recommendations import get_recommendations
    await get_recommendations(update, context)


async def handle_symptoms(update, context):
    from handlers.diagnosis import handle_symptoms as hs
    await hs(update, context)


# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
def main():
    application = Application.builder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("diagnose", diagnose))
    application.add_handler(CommandHandler("recommendations", recommendations))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_symptoms))

    logging.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()


if __name__ == "__main__":
    main()
