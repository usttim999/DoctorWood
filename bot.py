import logging
import os
from dotenv import load_dotenv
from telegram import ReplyKeyboardMarkup, Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

from database import init_db
from handlers.profile import my_plants, build_profile_conversation, delete_plant_cb
from handlers.diagnosis import handle_symptoms
from handlers.recommendations import get_recommendations
from handlers.diagnose_photo import diagnose_photo
from handlers.trefle import build_trefle_conversation
from handlers.start import start, help_command

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env
load_dotenv()

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)

TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    logging.error("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    exit(1)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
MAIN_KEYBOARD = [
    ["üå± –ú–æ–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è", "üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"],
    ["üìö –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", "üåç –ü–æ–∏—Å–∫ —Ä–∞—Å—Ç–µ–Ω–∏–π"],
    ["üë®‚Äçüåæ –ß–∞—Ç —Å –∞–≥—Ä–æ–Ω–æ–º–æ–º"]
]


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply_markup = ReplyKeyboardMarkup(MAIN_KEYBOARD, resize_keyboard=True)
    await update.message.reply_text(
        "üåø *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DoctorWood!*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="Markdown",
        reply_markup=reply_markup,
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/myplants - –º–æ–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è\n"
        "/diagnose - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ —Ñ–æ—Ç–æ\n"
        "/recommendations - —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Ö–æ–¥—É\n",
        parse_mode="Markdown",
    )


async def diagnose_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üì∑ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏",
        reply_markup=ReplyKeyboardMarkup(MAIN_KEYBOARD, resize_keyboard=True),
    )


async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user = update.effective_user

    if text == "üå± –ú–æ–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è":
        await my_plants(update, context)

    elif text == "üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞":
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:\n"
            "‚Ä¢ üì∑ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø–æ —Ñ–æ—Ç–æ\n"
            "‚Ä¢ üìù –û–ø–∏—à–∏—Ç–µ —Å–∏–º–ø—Ç–æ–º—ã —Ç–µ–∫—Å—Ç–æ–º",
            reply_markup=ReplyKeyboardMarkup(MAIN_KEYBOARD, resize_keyboard=True),
        )

    elif text == "üìö –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏":
        await get_recommendations(update, context)

    elif text == "üåç –ü–æ–∏—Å–∫ —Ä–∞—Å—Ç–µ–Ω–∏–π":
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ Trefle:",
            reply_markup=ReplyKeyboardMarkup([["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]], resize_keyboard=True),
        )
        # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–ª–æ–≥ Trefle
        from handlers.trefle import trefle_start
        await trefle_start(update, context)

    elif text == "üë®‚Äçüåæ –ß–∞—Ç —Å –∞–≥—Ä–æ–Ω–æ–º–æ–º":
        await update.message.reply_text(
            "üë®‚Äçüåæ *–ß–∞—Ç —Å –∞–≥—Ä–æ–Ω–æ–º–æ–º*\n\n"
            "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üõ†Ô∏è\n\n"
            "–°–∫–æ—Ä–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ:\n"
            "‚Ä¢ üí¨ –ó–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º –∞–≥—Ä–æ–Ω–æ–º–∞–º\n"
            "‚Ä¢ üì∏ –ü–æ–ª—É—á–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –≤–∞—à–∏–º —Ä–∞—Å—Ç–µ–Ω–∏—è–º\n"
            "‚Ä¢ üåø –ü–æ–ª—É—á–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n"
            "–ê –ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Ä–∞—Å—Ç–µ–Ω–∏–π! üîç",
            parse_mode="Markdown",
            reply_markup=ReplyKeyboardMarkup(MAIN_KEYBOARD, resize_keyboard=True)
        )

    elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await start(update, context)


def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    init_db()

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –±–æ–ª–µ–µ –Ω–∞–¥—ë–∂–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    app = Application.builder().token(TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("myplants", my_plants))
    app.add_handler(CommandHandler("recommendations", get_recommendations))
    app.add_handler(CommandHandler("diagnose", diagnose_command))

    # –î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏—è
    app.add_handler(build_profile_conversation())

    # Trefle –ø–æ–∏—Å–∫
    app.add_handler(build_trefle_conversation())

    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ —Ñ–æ—Ç–æ
    app.add_handler(MessageHandler(filters.PHOTO, diagnose_photo))

    # Callback –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏—è
    app.add_handler(CallbackQueryHandler(delete_plant_cb, pattern="^delete_"))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
    app.add_handler(
        MessageHandler(
            filters.Regex(
                "^(üå± –ú–æ–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è|üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞|üìö –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏|üåç –ü–æ–∏—Å–∫ —Ä–∞—Å—Ç–µ–Ω–∏–π|üë®‚Äçüåæ –ß–∞—Ç —Å –∞–≥—Ä–æ–Ω–æ–º–æ–º|‚¨ÖÔ∏è –ù–∞–∑–∞–¥)$"
            ),
            handle_menu,
        )
    )

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–º–ø—Ç–æ–º–æ–≤ (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, –Ω–µ –∫–æ–º–∞–Ω–¥—ã)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_symptoms))

    # –£–±–µ–¥–∏—Å—å, —á—Ç–æ —Å—Ç–∞—Ä—ã–π –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!
    logging.info("üîÑ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã...")

    logging.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

    # –ó–∞–ø—É—Å–∫ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    try:
        app.run_polling(
            allowed_updates=Update.ALL_TYPES,
            drop_pending_updates=True  # –í–∞–∂–Ω–æ! –ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        )
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        # –ü—Ä–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–µ –∂–¥—ë–º –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º
        import time
        time.sleep(10)
        app.run_polling(drop_pending_updates=True)


if __name__ == "__main__":
    main()